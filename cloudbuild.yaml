steps:
  # Step 1: Build the Docker image for the Python Flask app
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-docker.pkg.dev/cot4930-001/automationcd/colored-page:$COMMIT_SHA', '.']
    env:
      - 'API_KEY=${_API_KEY}'

  # Step 2: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-docker.pkg.dev/cot4930-001/automationcd/colored-page:$COMMIT_SHA']
    env:
      - 'API_KEY=${_API_KEY}'

  # Step 3: Deploy the blue version of the service
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'production-blue',
      '--image', 'us-docker.pkg.dev/cot4930-001/automationcd/colored-page:$COMMIT_SHA',
      '--region', 'us-east1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--set-env-vars', 'COLOR=blue,API_KEY=${_API_KEY}'
    ]

  # Step 4: Deploy the green version of the service
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'production-green',
      '--image', 'us-docker.pkg.dev/cot4930-001/automationcd/colored-page:$COMMIT_SHA',
      '--region', 'us-east1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--set-env-vars', 'COLOR=green,API_KEY=${_API_KEY}'
    ]

  # Step 5: Automatically get revision names and update traffic
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Fetch the latest revision names for blue and green versions
        BLUE_REVISION=$(gcloud run revisions list --service production --platform managed --region us-east1 --filter="name:production-blue" --format="value(name)" | head -n 1)
        GREEN_REVISION=$(gcloud run revisions list --service production --platform managed --region us-east1 --filter="name:production-green" --format="value(name)" | head -n 1)
        
        # Ensure both revisions exist before attempting to update traffic
        if [ -z "$BLUE_REVISION" ] || [ -z "$GREEN_REVISION" ]; then
          echo "One or both revisions are missing. Exiting."
          exit 1
        fi
        
        echo "Updating traffic to 50/50 split between $BLUE_REVISION and $GREEN_REVISION"
        
        # Update the traffic split to 50/50
        gcloud run services update-traffic production \
          --region us-east1 \
          --platform managed \
          --to-revisions $BLUE_REVISION=50,$GREEN_REVISION=50
