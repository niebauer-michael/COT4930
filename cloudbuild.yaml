options:
  logging: CLOUD_LOGGING_ONLY  # Cloud Build logs will be sent only to Cloud Logging.

steps:
  # Step 1: Build the Docker image for the Python Flask app
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-docker.pkg.dev/cot4930-001/automationcd/colored-page:$COMMIT_SHA', '.']
    env:
      - 'API_KEY=${_API_KEY}'  # Reference the environment variable directly

  # Step 2: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-docker.pkg.dev/cot4930-001/automationcd/colored-page:$COMMIT_SHA']
    env:
      - 'API_KEY=${_API_KEY}'  # Reference the environment variable directly

  # Step 3: Deploy the Docker image to Cloud Run (initial deployment)
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'colored-page',  # Cloud Run service name
      '--image', 'us-docker.pkg.dev/cot4930-001/automationcd/colored-page:$COMMIT_SHA',
      '--region', 'us-east1',
      '--platform', 'managed',
      '--allow-unauthenticated'
    ]

  # Optional Step 4: Split traffic 50/50 between revisions for A/B testing (green vs blue)
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'services', 'update-traffic', 'colored-page',  # Cloud Run service name
      '--region', 'us-east1',
      '--platform', 'managed',
      '--to-revision', 'colored-page-green',  # Green revision
      '--split', '50=colored-page-green,50=colored-page-blue'  # Split 50/50 between green and blue
    ]